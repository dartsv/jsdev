

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Entities
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class Forecast : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the Forecast entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Forecast()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Forecast(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Forecast> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.Forecast.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Forecast_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Forecast_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TimePeriod
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.TimePeriod);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.TimePeriod, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimePeriod_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimePeriod_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimePeriod_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime PeriodEnd
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.PeriodEnd);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.PeriodEnd, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodEnd_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodEnd_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodEnd_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int WeekDays
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.WeekDays);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.WeekDays, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int WorkHours
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.WorkHours);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.WorkHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int HolidayHours
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.HolidayHours);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.HolidayHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HolidayHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HolidayHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HolidayHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ChargeableHours
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.ChargeableHours);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.ChargeableHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ChargeableHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ChargeableHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ChargeableHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal NonChargeableHours
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.NonChargeableHours);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.NonChargeableHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NonChargeableHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NonChargeableHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NonChargeableHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ExceptionHours
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.ExceptionHours);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.ExceptionHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExceptionHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExceptionHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExceptionHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Utilization
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Utilization);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Utilization, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Availability
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Availability);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Availability, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string UserId
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.UserId);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.UserId, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserId_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserId_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserId_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LastName
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.LastName);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.LastName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FirstName
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.FirstName);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.FirstName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int RecID
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.RecID);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.RecID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int EmployeeID
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.EmployeeID);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.EmployeeID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Title
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Title);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Title, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Department
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Department);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Department, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Region
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Region);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Region, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Country
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Country);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Country, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int PeriodHours
        {
            get
            {
                return global::LightSwitchApplication.Forecast.DetailsClass.GetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.PeriodHours);
            }
            set
            {
                global::LightSwitchApplication.Forecast.DetailsClass.SetValue(this, global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.PeriodHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodHours_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.Forecast,
                global::LightSwitchApplication.Forecast.DetailsClass,
                global::LightSwitchApplication.Forecast.DetailsClass.IImplementation,
                global::LightSwitchApplication.Forecast.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.TimePeriod;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass>.Entry
                __ForecastEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass>.Entry(
                    global::LightSwitchApplication.Forecast.DetailsClass.__Forecast_CreateNew,
                    global::LightSwitchApplication.Forecast.DetailsClass.__Forecast_Created,
                    global::LightSwitchApplication.Forecast.DetailsClass.__Forecast_AllowSaveWithErrors);
            private static global::LightSwitchApplication.Forecast __Forecast_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.Forecast> es)
            {
                return new global::LightSwitchApplication.Forecast(es);
            }
            private static void __Forecast_Created(global::LightSwitchApplication.Forecast e)
            {
                e.Forecast_Created();
            }
            private static bool __Forecast_AllowSaveWithErrors(global::LightSwitchApplication.Forecast e)
            {
                bool result = false;
                e.Forecast_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.Forecast.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int> TimePeriod
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.TimePeriod) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, global::System.DateTime> PeriodEnd
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.PeriodEnd) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int> WeekDays
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.WeekDays) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int> WorkHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.WorkHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int> HolidayHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.HolidayHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal> ChargeableHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.ChargeableHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal> NonChargeableHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.NonChargeableHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal> ExceptionHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.ExceptionHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal> Utilization
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Utilization) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal> Availability
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Availability) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string> UserId
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.UserId) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string> LastName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.LastName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string> FirstName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.FirstName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int> RecID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.RecID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int> EmployeeID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.EmployeeID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string> Title
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Title) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string> Department
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Department) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string> Region
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Region) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string> Country
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.Country) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int> PeriodHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties.PeriodHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int TimePeriod { get; set; }
                new global::System.DateTime PeriodEnd { get; set; }
                new int WeekDays { get; set; }
                new int WorkHours { get; set; }
                new int HolidayHours { get; set; }
                new decimal ChargeableHours { get; set; }
                new decimal NonChargeableHours { get; set; }
                new decimal ExceptionHours { get; set; }
                new decimal Utilization { get; set; }
                new decimal Availability { get; set; }
                new string UserId { get; set; }
                new string LastName { get; set; }
                new string FirstName { get; set; }
                new int RecID { get; set; }
                new int EmployeeID { get; set; }
                new string Title { get; set; }
                new string Department { get; set; }
                new string Region { get; set; }
                new string Country { get; set; }
                new int PeriodHours { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry
                    TimePeriod = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry(
                        "TimePeriod",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._TimePeriod_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._TimePeriod_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._TimePeriod_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._TimePeriod_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._TimePeriod_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._TimePeriod_OnValueChanged);
                private static void _TimePeriod_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._TimePeriod, sf);
                }
                private static bool _TimePeriod_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.TimePeriod_IsReadOnly(ref result);
                    return result;
                }
                private static void _TimePeriod_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TimePeriod_Validate(r);
                }
                private static int _TimePeriod_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.TimePeriod;
                }
                private static void _TimePeriod_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.TimePeriod = v;
                }
                private static void _TimePeriod_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.TimePeriod_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, global::System.DateTime>.Entry
                    PeriodEnd = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, global::System.DateTime>.Entry(
                        "PeriodEnd",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodEnd_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodEnd_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodEnd_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodEnd_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodEnd_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodEnd_OnValueChanged);
                private static void _PeriodEnd_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._PeriodEnd, sf);
                }
                private static bool _PeriodEnd_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.PeriodEnd_IsReadOnly(ref result);
                    return result;
                }
                private static void _PeriodEnd_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PeriodEnd_Validate(r);
                }
                private static global::System.DateTime _PeriodEnd_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.PeriodEnd;
                }
                private static void _PeriodEnd_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.PeriodEnd = global::LightSwitchApplication.Forecast.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _PeriodEnd_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.PeriodEnd_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry
                    WeekDays = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry(
                        "WeekDays",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WeekDays_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WeekDays_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WeekDays_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WeekDays_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WeekDays_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WeekDays_OnValueChanged);
                private static void _WeekDays_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._WeekDays, sf);
                }
                private static bool _WeekDays_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.WeekDays_IsReadOnly(ref result);
                    return result;
                }
                private static void _WeekDays_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.WeekDays_Validate(r);
                }
                private static int _WeekDays_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.WeekDays;
                }
                private static void _WeekDays_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.WeekDays = v;
                }
                private static void _WeekDays_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.WeekDays_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry
                    WorkHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry(
                        "WorkHours",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WorkHours_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WorkHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WorkHours_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WorkHours_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WorkHours_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._WorkHours_OnValueChanged);
                private static void _WorkHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._WorkHours, sf);
                }
                private static bool _WorkHours_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.WorkHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _WorkHours_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.WorkHours_Validate(r);
                }
                private static int _WorkHours_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.WorkHours;
                }
                private static void _WorkHours_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.WorkHours = v;
                }
                private static void _WorkHours_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.WorkHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry
                    HolidayHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry(
                        "HolidayHours",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._HolidayHours_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._HolidayHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._HolidayHours_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._HolidayHours_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._HolidayHours_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._HolidayHours_OnValueChanged);
                private static void _HolidayHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._HolidayHours, sf);
                }
                private static bool _HolidayHours_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.HolidayHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _HolidayHours_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.HolidayHours_Validate(r);
                }
                private static int _HolidayHours_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.HolidayHours;
                }
                private static void _HolidayHours_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.HolidayHours = v;
                }
                private static void _HolidayHours_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.HolidayHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry
                    ChargeableHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry(
                        "ChargeableHours",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ChargeableHours_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ChargeableHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ChargeableHours_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ChargeableHours_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ChargeableHours_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ChargeableHours_OnValueChanged);
                private static void _ChargeableHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._ChargeableHours, sf);
                }
                private static bool _ChargeableHours_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.ChargeableHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _ChargeableHours_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ChargeableHours_Validate(r);
                }
                private static decimal _ChargeableHours_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.ChargeableHours;
                }
                private static void _ChargeableHours_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.ChargeableHours = v;
                }
                private static void _ChargeableHours_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.ChargeableHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry
                    NonChargeableHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry(
                        "NonChargeableHours",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._NonChargeableHours_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._NonChargeableHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._NonChargeableHours_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._NonChargeableHours_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._NonChargeableHours_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._NonChargeableHours_OnValueChanged);
                private static void _NonChargeableHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._NonChargeableHours, sf);
                }
                private static bool _NonChargeableHours_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.NonChargeableHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _NonChargeableHours_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.NonChargeableHours_Validate(r);
                }
                private static decimal _NonChargeableHours_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.NonChargeableHours;
                }
                private static void _NonChargeableHours_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.NonChargeableHours = v;
                }
                private static void _NonChargeableHours_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.NonChargeableHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry
                    ExceptionHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry(
                        "ExceptionHours",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ExceptionHours_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ExceptionHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ExceptionHours_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ExceptionHours_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ExceptionHours_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._ExceptionHours_OnValueChanged);
                private static void _ExceptionHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._ExceptionHours, sf);
                }
                private static bool _ExceptionHours_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.ExceptionHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _ExceptionHours_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ExceptionHours_Validate(r);
                }
                private static decimal _ExceptionHours_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.ExceptionHours;
                }
                private static void _ExceptionHours_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.ExceptionHours = v;
                }
                private static void _ExceptionHours_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.ExceptionHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry
                    Utilization = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry(
                        "Utilization",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Utilization_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Utilization_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Utilization_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Utilization_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Utilization_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Utilization_OnValueChanged);
                private static void _Utilization_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Utilization, sf);
                }
                private static bool _Utilization_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.Utilization_IsReadOnly(ref result);
                    return result;
                }
                private static void _Utilization_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Utilization_Validate(r);
                }
                private static decimal _Utilization_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Utilization;
                }
                private static void _Utilization_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Utilization = v;
                }
                private static void _Utilization_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.Utilization_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry
                    Availability = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Entry(
                        "Availability",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Availability_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Availability_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Availability_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Availability_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Availability_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Availability_OnValueChanged);
                private static void _Availability_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Availability, sf);
                }
                private static bool _Availability_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.Availability_IsReadOnly(ref result);
                    return result;
                }
                private static void _Availability_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Availability_Validate(r);
                }
                private static decimal _Availability_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Availability;
                }
                private static void _Availability_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Availability = v;
                }
                private static void _Availability_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.Availability_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry
                    UserId = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry(
                        "UserId",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._UserId_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._UserId_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._UserId_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._UserId_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._UserId_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._UserId_OnValueChanged);
                private static void _UserId_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._UserId, sf);
                }
                private static bool _UserId_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.UserId_IsReadOnly(ref result);
                    return result;
                }
                private static void _UserId_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UserId_Validate(r);
                }
                private static string _UserId_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.UserId;
                }
                private static void _UserId_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.UserId = v;
                }
                private static void _UserId_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.UserId_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry
                    LastName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry(
                        "LastName",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._LastName_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._LastName_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._LastName_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._LastName_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._LastName_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._LastName_OnValueChanged);
                private static void _LastName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._LastName, sf);
                }
                private static bool _LastName_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.LastName_IsReadOnly(ref result);
                    return result;
                }
                private static void _LastName_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.LastName_Validate(r);
                }
                private static string _LastName_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.LastName;
                }
                private static void _LastName_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.LastName = v;
                }
                private static void _LastName_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.LastName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry
                    FirstName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry(
                        "FirstName",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._FirstName_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._FirstName_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._FirstName_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._FirstName_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._FirstName_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._FirstName_OnValueChanged);
                private static void _FirstName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._FirstName, sf);
                }
                private static bool _FirstName_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.FirstName_IsReadOnly(ref result);
                    return result;
                }
                private static void _FirstName_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.FirstName_Validate(r);
                }
                private static string _FirstName_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.FirstName;
                }
                private static void _FirstName_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.FirstName = v;
                }
                private static void _FirstName_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.FirstName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry
                    RecID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry(
                        "RecID",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._RecID_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._RecID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._RecID_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._RecID_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._RecID_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._RecID_OnValueChanged);
                private static void _RecID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._RecID, sf);
                }
                private static bool _RecID_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.RecID_IsReadOnly(ref result);
                    return result;
                }
                private static void _RecID_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.RecID_Validate(r);
                }
                private static int _RecID_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.RecID;
                }
                private static void _RecID_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.RecID = v;
                }
                private static void _RecID_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.RecID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry
                    EmployeeID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry(
                        "EmployeeID",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._EmployeeID_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._EmployeeID_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._EmployeeID_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._EmployeeID_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._EmployeeID_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._EmployeeID_OnValueChanged);
                private static void _EmployeeID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._EmployeeID, sf);
                }
                private static bool _EmployeeID_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.EmployeeID_IsReadOnly(ref result);
                    return result;
                }
                private static void _EmployeeID_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.EmployeeID_Validate(r);
                }
                private static int _EmployeeID_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.EmployeeID;
                }
                private static void _EmployeeID_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.EmployeeID = v;
                }
                private static void _EmployeeID_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.EmployeeID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry
                    Title = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry(
                        "Title",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Title_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Title_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Title_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Title_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Title_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Title_OnValueChanged);
                private static void _Title_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Title, sf);
                }
                private static bool _Title_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.Title_IsReadOnly(ref result);
                    return result;
                }
                private static void _Title_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Title_Validate(r);
                }
                private static string _Title_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Title;
                }
                private static void _Title_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Title = v;
                }
                private static void _Title_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.Title_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry
                    Department = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry(
                        "Department",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Department_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Department_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Department_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Department_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Department_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Department_OnValueChanged);
                private static void _Department_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Department, sf);
                }
                private static bool _Department_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.Department_IsReadOnly(ref result);
                    return result;
                }
                private static void _Department_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Department_Validate(r);
                }
                private static string _Department_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Department;
                }
                private static void _Department_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Department = v;
                }
                private static void _Department_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.Department_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry
                    Region = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry(
                        "Region",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Region_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Region_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Region_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Region_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Region_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Region_OnValueChanged);
                private static void _Region_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Region, sf);
                }
                private static bool _Region_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.Region_IsReadOnly(ref result);
                    return result;
                }
                private static void _Region_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Region_Validate(r);
                }
                private static string _Region_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Region;
                }
                private static void _Region_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Region = v;
                }
                private static void _Region_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.Region_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry
                    Country = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Entry(
                        "Country",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Country_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Country_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Country_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Country_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Country_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._Country_OnValueChanged);
                private static void _Country_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Country, sf);
                }
                private static bool _Country_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.Country_IsReadOnly(ref result);
                    return result;
                }
                private static void _Country_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Country_Validate(r);
                }
                private static string _Country_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Country;
                }
                private static void _Country_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Country = v;
                }
                private static void _Country_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.Country_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry
                    PeriodHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Entry(
                        "PeriodHours",
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodHours_Stub,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodHours_Validate,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodHours_GetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodHours_SetImplementationValue,
                        global::LightSwitchApplication.Forecast.DetailsClass.PropertySetProperties._PeriodHours_OnValueChanged);
                private static void _PeriodHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Forecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.Forecast.DetailsClass d, object sf)
                {
                    c(d, ref d._PeriodHours, sf);
                }
                private static bool _PeriodHours_ComputeIsReadOnly(global::LightSwitchApplication.Forecast e)
                {
                    bool result = false;
                    e.PeriodHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _PeriodHours_Validate(global::LightSwitchApplication.Forecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PeriodHours_Validate(r);
                }
                private static int _PeriodHours_GetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d)
                {
                    return d.ImplementationEntity.PeriodHours;
                }
                private static void _PeriodHours_SetImplementationValue(global::LightSwitchApplication.Forecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.PeriodHours = v;
                }
                private static void _PeriodHours_OnValueChanged(global::LightSwitchApplication.Forecast e)
                {
                    e.PeriodHours_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data _TimePeriod;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, global::System.DateTime>.Data _PeriodEnd;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data _WeekDays;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data _WorkHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data _HolidayHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data _ChargeableHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data _NonChargeableHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data _ExceptionHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data _Utilization;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, decimal>.Data _Availability;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data _UserId;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data _LastName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data _FirstName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data _RecID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data _EmployeeID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data _Title;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data _Department;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data _Region;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, string>.Data _Country;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.Forecast, global::LightSwitchApplication.Forecast.DetailsClass, int>.Data _PeriodHours;
            
        }
    
        #endregion
    }
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class EmployeeAssignmentReport : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the EmployeeAssignmentReport entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeAssignmentReport()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EmployeeAssignmentReport(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.EmployeeAssignmentReport> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeAssignmentReport_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeAssignmentReport_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int RecId
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.RecId);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.RecId, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecId_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecId_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecId_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ProjectID
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ProjectID);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ProjectID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int EmployeeID
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.EmployeeID);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.EmployeeID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LastName
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.LastName);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.LastName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FirstName
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.FirstName);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.FirstName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.StartDate);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.StartDate, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StartDate_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StartDate_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StartDate_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime EndDate
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.EndDate);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.EndDate, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EndDate_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EndDate_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EndDate_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Percent
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Percent);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Percent, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Percent_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Percent_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Percent_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Chargeable
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Chargeable);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Chargeable, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Chargeable_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Chargeable_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Chargeable_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Exception
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Exception);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Exception, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Exception_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Exception_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Exception_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Client
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Client);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Client, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Client_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Client_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Client_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Department
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Department);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Department, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime BookedEndDate
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.BookedEndDate);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.BookedEndDate, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BookedEndDate_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BookedEndDate_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void BookedEndDate_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime ForecastEndDate
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ForecastEndDate);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ForecastEndDate, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ForecastEndDate_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ForecastEndDate_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ForecastEndDate_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ProjectName
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ProjectName);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ProjectName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ClientName
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ClientName);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ClientName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ClientName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ClientName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ClientName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Rolloff
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Rolloff);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Rolloff, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Rolloff_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Rolloff_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Rolloff_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Title
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Title);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Title, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Region
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Region);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Region, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Country
        {
            get
            {
                return global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.GetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Country);
            }
            set
            {
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.SetValue(this, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Country, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.EmployeeAssignmentReport,
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass,
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.IImplementation,
                global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.RecId;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass>.Entry
                __EmployeeAssignmentReportEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass>.Entry(
                    global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.__EmployeeAssignmentReport_CreateNew,
                    global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.__EmployeeAssignmentReport_Created,
                    global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.__EmployeeAssignmentReport_AllowSaveWithErrors);
            private static global::LightSwitchApplication.EmployeeAssignmentReport __EmployeeAssignmentReport_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.EmployeeAssignmentReport> es)
            {
                return new global::LightSwitchApplication.EmployeeAssignmentReport(es);
            }
            private static void __EmployeeAssignmentReport_Created(global::LightSwitchApplication.EmployeeAssignmentReport e)
            {
                e.EmployeeAssignmentReport_Created();
            }
            private static bool __EmployeeAssignmentReport_AllowSaveWithErrors(global::LightSwitchApplication.EmployeeAssignmentReport e)
            {
                bool result = false;
                e.EmployeeAssignmentReport_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int> RecId
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.RecId) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int> ProjectID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ProjectID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int> EmployeeID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.EmployeeID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> LastName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.LastName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> FirstName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.FirstName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime> StartDate
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.StartDate) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime> EndDate
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.EndDate) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, decimal> Percent
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Percent) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool> Chargeable
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Chargeable) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool> Exception
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Exception) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> Client
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Client) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> Department
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Department) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime> BookedEndDate
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.BookedEndDate) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime> ForecastEndDate
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ForecastEndDate) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> ProjectName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ProjectName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> ClientName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.ClientName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool> Rolloff
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Rolloff) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> Title
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Title) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> Region
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Region) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string> Country
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties.Country) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int RecId { get; set; }
                new int ProjectID { get; set; }
                new int EmployeeID { get; set; }
                new string LastName { get; set; }
                new string FirstName { get; set; }
                new global::System.DateTime StartDate { get; set; }
                new global::System.DateTime EndDate { get; set; }
                new decimal Percent { get; set; }
                new bool Chargeable { get; set; }
                new bool Exception { get; set; }
                new string Client { get; set; }
                new string Department { get; set; }
                new global::System.DateTime BookedEndDate { get; set; }
                new global::System.DateTime ForecastEndDate { get; set; }
                new string ProjectName { get; set; }
                new string ClientName { get; set; }
                new bool Rolloff { get; set; }
                new string Title { get; set; }
                new string Region { get; set; }
                new string Country { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Entry
                    RecId = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Entry(
                        "RecId",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._RecId_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._RecId_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._RecId_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._RecId_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._RecId_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._RecId_OnValueChanged);
                private static void _RecId_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._RecId, sf);
                }
                private static bool _RecId_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.RecId_IsReadOnly(ref result);
                    return result;
                }
                private static void _RecId_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.RecId_Validate(r);
                }
                private static int _RecId_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.RecId;
                }
                private static void _RecId_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, int v)
                {
                    d.ImplementationEntity.RecId = v;
                }
                private static void _RecId_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.RecId_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Entry
                    ProjectID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Entry(
                        "ProjectID",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectID_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectID_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectID_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectID_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectID_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectID_OnValueChanged);
                private static void _ProjectID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._ProjectID, sf);
                }
                private static bool _ProjectID_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.ProjectID_IsReadOnly(ref result);
                    return result;
                }
                private static void _ProjectID_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ProjectID_Validate(r);
                }
                private static int _ProjectID_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.ProjectID;
                }
                private static void _ProjectID_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, int v)
                {
                    d.ImplementationEntity.ProjectID = v;
                }
                private static void _ProjectID_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.ProjectID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Entry
                    EmployeeID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Entry(
                        "EmployeeID",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EmployeeID_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EmployeeID_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EmployeeID_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EmployeeID_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EmployeeID_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EmployeeID_OnValueChanged);
                private static void _EmployeeID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._EmployeeID, sf);
                }
                private static bool _EmployeeID_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.EmployeeID_IsReadOnly(ref result);
                    return result;
                }
                private static void _EmployeeID_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.EmployeeID_Validate(r);
                }
                private static int _EmployeeID_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.EmployeeID;
                }
                private static void _EmployeeID_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, int v)
                {
                    d.ImplementationEntity.EmployeeID = v;
                }
                private static void _EmployeeID_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.EmployeeID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    LastName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "LastName",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._LastName_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._LastName_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._LastName_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._LastName_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._LastName_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._LastName_OnValueChanged);
                private static void _LastName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._LastName, sf);
                }
                private static bool _LastName_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.LastName_IsReadOnly(ref result);
                    return result;
                }
                private static void _LastName_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.LastName_Validate(r);
                }
                private static string _LastName_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.LastName;
                }
                private static void _LastName_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.LastName = v;
                }
                private static void _LastName_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.LastName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    FirstName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "FirstName",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._FirstName_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._FirstName_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._FirstName_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._FirstName_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._FirstName_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._FirstName_OnValueChanged);
                private static void _FirstName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._FirstName, sf);
                }
                private static bool _FirstName_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.FirstName_IsReadOnly(ref result);
                    return result;
                }
                private static void _FirstName_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.FirstName_Validate(r);
                }
                private static string _FirstName_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.FirstName;
                }
                private static void _FirstName_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.FirstName = v;
                }
                private static void _FirstName_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.FirstName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Entry
                    StartDate = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Entry(
                        "StartDate",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._StartDate_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._StartDate_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._StartDate_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._StartDate_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._StartDate_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._StartDate_OnValueChanged);
                private static void _StartDate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._StartDate, sf);
                }
                private static bool _StartDate_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.StartDate_IsReadOnly(ref result);
                    return result;
                }
                private static void _StartDate_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.StartDate_Validate(r);
                }
                private static global::System.DateTime _StartDate_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.StartDate;
                }
                private static void _StartDate_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.StartDate = global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _StartDate_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.StartDate_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Entry
                    EndDate = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Entry(
                        "EndDate",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EndDate_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EndDate_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EndDate_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EndDate_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EndDate_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._EndDate_OnValueChanged);
                private static void _EndDate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._EndDate, sf);
                }
                private static bool _EndDate_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.EndDate_IsReadOnly(ref result);
                    return result;
                }
                private static void _EndDate_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.EndDate_Validate(r);
                }
                private static global::System.DateTime _EndDate_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.EndDate;
                }
                private static void _EndDate_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.EndDate = global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _EndDate_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.EndDate_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, decimal>.Entry
                    Percent = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, decimal>.Entry(
                        "Percent",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Percent_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Percent_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Percent_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Percent_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Percent_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Percent_OnValueChanged);
                private static void _Percent_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Percent, sf);
                }
                private static bool _Percent_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Percent_IsReadOnly(ref result);
                    return result;
                }
                private static void _Percent_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Percent_Validate(r);
                }
                private static decimal _Percent_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Percent;
                }
                private static void _Percent_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Percent = v;
                }
                private static void _Percent_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Percent_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Entry
                    Chargeable = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Entry(
                        "Chargeable",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Chargeable_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Chargeable_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Chargeable_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Chargeable_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Chargeable_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Chargeable_OnValueChanged);
                private static void _Chargeable_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Chargeable, sf);
                }
                private static bool _Chargeable_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Chargeable_IsReadOnly(ref result);
                    return result;
                }
                private static void _Chargeable_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Chargeable_Validate(r);
                }
                private static bool _Chargeable_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Chargeable;
                }
                private static void _Chargeable_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Chargeable = v;
                }
                private static void _Chargeable_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Chargeable_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Entry
                    Exception = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Entry(
                        "Exception",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Exception_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Exception_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Exception_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Exception_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Exception_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Exception_OnValueChanged);
                private static void _Exception_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Exception, sf);
                }
                private static bool _Exception_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Exception_IsReadOnly(ref result);
                    return result;
                }
                private static void _Exception_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Exception_Validate(r);
                }
                private static bool _Exception_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Exception;
                }
                private static void _Exception_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Exception = v;
                }
                private static void _Exception_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Exception_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    Client = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "Client",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Client_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Client_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Client_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Client_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Client_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Client_OnValueChanged);
                private static void _Client_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Client, sf);
                }
                private static bool _Client_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Client_IsReadOnly(ref result);
                    return result;
                }
                private static void _Client_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Client_Validate(r);
                }
                private static string _Client_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Client;
                }
                private static void _Client_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Client = v;
                }
                private static void _Client_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Client_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    Department = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "Department",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Department_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Department_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Department_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Department_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Department_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Department_OnValueChanged);
                private static void _Department_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Department, sf);
                }
                private static bool _Department_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Department_IsReadOnly(ref result);
                    return result;
                }
                private static void _Department_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Department_Validate(r);
                }
                private static string _Department_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Department;
                }
                private static void _Department_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Department = v;
                }
                private static void _Department_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Department_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Entry
                    BookedEndDate = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Entry(
                        "BookedEndDate",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._BookedEndDate_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._BookedEndDate_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._BookedEndDate_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._BookedEndDate_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._BookedEndDate_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._BookedEndDate_OnValueChanged);
                private static void _BookedEndDate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._BookedEndDate, sf);
                }
                private static bool _BookedEndDate_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.BookedEndDate_IsReadOnly(ref result);
                    return result;
                }
                private static void _BookedEndDate_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.BookedEndDate_Validate(r);
                }
                private static global::System.DateTime _BookedEndDate_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.BookedEndDate;
                }
                private static void _BookedEndDate_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.BookedEndDate = global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _BookedEndDate_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.BookedEndDate_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Entry
                    ForecastEndDate = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Entry(
                        "ForecastEndDate",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ForecastEndDate_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ForecastEndDate_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ForecastEndDate_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ForecastEndDate_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ForecastEndDate_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ForecastEndDate_OnValueChanged);
                private static void _ForecastEndDate_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._ForecastEndDate, sf);
                }
                private static bool _ForecastEndDate_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.ForecastEndDate_IsReadOnly(ref result);
                    return result;
                }
                private static void _ForecastEndDate_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ForecastEndDate_Validate(r);
                }
                private static global::System.DateTime _ForecastEndDate_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.ForecastEndDate;
                }
                private static void _ForecastEndDate_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.ForecastEndDate = global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _ForecastEndDate_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.ForecastEndDate_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    ProjectName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "ProjectName",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectName_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectName_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectName_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectName_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectName_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ProjectName_OnValueChanged);
                private static void _ProjectName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._ProjectName, sf);
                }
                private static bool _ProjectName_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.ProjectName_IsReadOnly(ref result);
                    return result;
                }
                private static void _ProjectName_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ProjectName_Validate(r);
                }
                private static string _ProjectName_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.ProjectName;
                }
                private static void _ProjectName_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ProjectName = v;
                }
                private static void _ProjectName_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.ProjectName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    ClientName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "ClientName",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ClientName_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ClientName_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ClientName_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ClientName_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ClientName_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._ClientName_OnValueChanged);
                private static void _ClientName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._ClientName, sf);
                }
                private static bool _ClientName_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.ClientName_IsReadOnly(ref result);
                    return result;
                }
                private static void _ClientName_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ClientName_Validate(r);
                }
                private static string _ClientName_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.ClientName;
                }
                private static void _ClientName_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.ClientName = v;
                }
                private static void _ClientName_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.ClientName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Entry
                    Rolloff = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Entry(
                        "Rolloff",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Rolloff_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Rolloff_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Rolloff_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Rolloff_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Rolloff_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Rolloff_OnValueChanged);
                private static void _Rolloff_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Rolloff, sf);
                }
                private static bool _Rolloff_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Rolloff_IsReadOnly(ref result);
                    return result;
                }
                private static void _Rolloff_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Rolloff_Validate(r);
                }
                private static bool _Rolloff_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Rolloff;
                }
                private static void _Rolloff_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, bool v)
                {
                    d.ImplementationEntity.Rolloff = v;
                }
                private static void _Rolloff_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Rolloff_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    Title = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "Title",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Title_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Title_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Title_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Title_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Title_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Title_OnValueChanged);
                private static void _Title_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Title, sf);
                }
                private static bool _Title_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Title_IsReadOnly(ref result);
                    return result;
                }
                private static void _Title_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Title_Validate(r);
                }
                private static string _Title_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Title;
                }
                private static void _Title_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Title = v;
                }
                private static void _Title_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Title_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    Region = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "Region",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Region_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Region_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Region_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Region_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Region_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Region_OnValueChanged);
                private static void _Region_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Region, sf);
                }
                private static bool _Region_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Region_IsReadOnly(ref result);
                    return result;
                }
                private static void _Region_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Region_Validate(r);
                }
                private static string _Region_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Region;
                }
                private static void _Region_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Region = v;
                }
                private static void _Region_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Region_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry
                    Country = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Entry(
                        "Country",
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Country_Stub,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Country_ComputeIsReadOnly,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Country_Validate,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Country_GetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Country_SetImplementationValue,
                        global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass.PropertySetProperties._Country_OnValueChanged);
                private static void _Country_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data> c, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, object sf)
                {
                    c(d, ref d._Country, sf);
                }
                private static bool _Country_ComputeIsReadOnly(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    bool result = false;
                    e.Country_IsReadOnly(ref result);
                    return result;
                }
                private static void _Country_Validate(global::LightSwitchApplication.EmployeeAssignmentReport e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Country_Validate(r);
                }
                private static string _Country_GetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d)
                {
                    return d.ImplementationEntity.Country;
                }
                private static void _Country_SetImplementationValue(global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Country = v;
                }
                private static void _Country_OnValueChanged(global::LightSwitchApplication.EmployeeAssignmentReport e)
                {
                    e.Country_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Data _RecId;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Data _ProjectID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, int>.Data _EmployeeID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _LastName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _FirstName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Data _StartDate;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Data _EndDate;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, decimal>.Data _Percent;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Data _Chargeable;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Data _Exception;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _Client;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _Department;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Data _BookedEndDate;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, global::System.DateTime>.Data _ForecastEndDate;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _ProjectName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _ClientName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, bool>.Data _Rolloff;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _Title;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _Region;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.EmployeeAssignmentReport, global::LightSwitchApplication.EmployeeAssignmentReport.DetailsClass, string>.Data _Country;
            
        }
    
        #endregion
    }
    
    /// <summary>
    /// No Modeled Description Available
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class MultiPeriodForecast : global::Microsoft.LightSwitch.Framework.Base.EntityObject<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass>
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the MultiPeriodForecast entity.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MultiPeriodForecast()
            : this(null)
        {
        }
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MultiPeriodForecast(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.MultiPeriodForecast> entitySet)
            : base(entitySet)
        {
            global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.Initialize(this);
        }
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MultiPeriodForecast_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MultiPeriodForecast_AllowSaveWithErrors(ref bool result);
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace> Application
        {
            get
            {
                return (global::Microsoft.LightSwitch.IApplication<global::LightSwitchApplication.DataWorkspace>)global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.EntitySet.Details.DataService.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Public Properties
    
        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int RecID
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.RecID);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.RecID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RecID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int EmployeeID
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.EmployeeID);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.EmployeeID, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void EmployeeID_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TimePeriod
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.TimePeriod);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.TimePeriod, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimePeriod_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimePeriod_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void TimePeriod_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime PeriodEnd
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.PeriodEnd);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.PeriodEnd, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodEnd_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodEnd_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodEnd_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int WeekDays
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.WeekDays);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.WeekDays, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WeekDays_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int WorkHours
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.WorkHours);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.WorkHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void WorkHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int HolidayHours
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.HolidayHours);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.HolidayHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HolidayHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HolidayHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void HolidayHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ChargeableHours
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.ChargeableHours);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.ChargeableHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ChargeableHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ChargeableHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ChargeableHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal NonChargeableHours
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.NonChargeableHours);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.NonChargeableHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NonChargeableHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NonChargeableHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NonChargeableHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ExceptionHours
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.ExceptionHours);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.ExceptionHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExceptionHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExceptionHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ExceptionHours_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Utilization
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Availability
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Utilization1
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization1);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization1, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization1_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization1_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization1_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Availability1
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability1);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability1, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability1_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability1_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability1_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string UserId
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.UserId);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.UserId, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserId_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserId_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UserId_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LastName
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.LastName);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.LastName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void LastName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FirstName
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.FirstName);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.FirstName, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FirstName_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Title
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Title);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Title, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Title_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Utilization2
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization2);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization2, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization2_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization2_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization2_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Availability2
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability2);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability2, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability2_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability2_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability2_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Utilization3
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization3);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization3, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization3_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization3_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization3_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Availability3
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability3);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability3, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability3_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability3_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability3_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Utilization4
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization4);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization4, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization4_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization4_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization4_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Availability4
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability4);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability4, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability4_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability4_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability4_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Utilization5
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization5);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization5, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization5_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization5_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Utilization5_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal Availability5
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability5);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability5, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability5_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability5_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Availability5_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Department
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Department);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Department, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Department_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Region
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Region);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Region, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Region_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Country
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Country);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Country, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Country_Changed();

        /// <summary>
        /// No Modeled Description Available
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int PeriodHours
        {
            get
            {
                return global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.GetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.PeriodHours);
            }
            set
            {
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.SetValue(this, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.PeriodHours, value);
            }
        }
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodHours_IsReadOnly(ref bool result);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodHours_Validate(global::Microsoft.LightSwitch.EntityValidationResultsBuilder results);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PeriodHours_Changed();

        #endregion
    
        #region Details Class
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass : global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<
                global::LightSwitchApplication.MultiPeriodForecast,
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass,
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.IImplementation,
                global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySet,
                global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass>,
                global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass>>
        {
    
            static DetailsClass()
            {
                var initializeEntry = global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.RecID;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass>.Entry
                __MultiPeriodForecastEntry = new global::Microsoft.LightSwitch.Details.Framework.Base.EntityDetails<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass>.Entry(
                    global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.__MultiPeriodForecast_CreateNew,
                    global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.__MultiPeriodForecast_Created,
                    global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.__MultiPeriodForecast_AllowSaveWithErrors);
            private static global::LightSwitchApplication.MultiPeriodForecast __MultiPeriodForecast_CreateNew(global::Microsoft.LightSwitch.Framework.EntitySet<global::LightSwitchApplication.MultiPeriodForecast> es)
            {
                return new global::LightSwitchApplication.MultiPeriodForecast(es);
            }
            private static void __MultiPeriodForecast_Created(global::LightSwitchApplication.MultiPeriodForecast e)
            {
                e.MultiPeriodForecast_Created();
            }
            private static bool __MultiPeriodForecast_AllowSaveWithErrors(global::LightSwitchApplication.MultiPeriodForecast e)
            {
                bool result = false;
                e.MultiPeriodForecast_AllowSaveWithErrors(ref result);
                return result;
            }
    
            public DetailsClass() : base()
            {
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityCommandSet<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass> Commands
            {
                get
                {
                    return base.Commands;
                }
            }
    
            public new global::Microsoft.LightSwitch.Details.Framework.EntityMethodSet<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass> Methods
            {
                get
                {
                    return base.Methods;
                }
            }
    
            public new global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet : global::Microsoft.LightSwitch.Details.Framework.Base.EntityPropertySet<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass>
            {
    
                public PropertySet() : base()
                {
                }
    
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int> RecID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.RecID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int> EmployeeID
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.EmployeeID) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int> TimePeriod
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.TimePeriod) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::System.DateTime> PeriodEnd
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.PeriodEnd) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::System.DateTime>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int> WeekDays
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.WeekDays) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int> WorkHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.WorkHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int> HolidayHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.HolidayHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> ChargeableHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.ChargeableHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> NonChargeableHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.NonChargeableHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> ExceptionHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.ExceptionHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Utilization
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Availability
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Utilization1
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization1) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Availability1
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability1) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string> UserId
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.UserId) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string> LastName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.LastName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string> FirstName
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.FirstName) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string> Title
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Title) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Utilization2
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization2) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Availability2
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability2) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Utilization3
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization3) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Availability3
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability3) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Utilization4
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization4) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Availability4
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability4) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Utilization5
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Utilization5) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal> Availability5
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Availability5) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string> Department
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Department) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string> Region
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Region) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string> Country
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.Country) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>;
                    }
                }
                
                public global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int> PeriodHours
                {
                    get
                    {
                        return base.GetItem(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties.PeriodHours) as global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>;
                    }
                }
                
            }
    
            #pragma warning disable 109
            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
            public interface IImplementation : global::Microsoft.LightSwitch.Internal.IEntityImplementation
            {
                new int RecID { get; set; }
                new int EmployeeID { get; set; }
                new int TimePeriod { get; set; }
                new global::System.DateTime PeriodEnd { get; set; }
                new int WeekDays { get; set; }
                new int WorkHours { get; set; }
                new int HolidayHours { get; set; }
                new decimal ChargeableHours { get; set; }
                new decimal NonChargeableHours { get; set; }
                new decimal ExceptionHours { get; set; }
                new decimal Utilization { get; set; }
                new decimal Availability { get; set; }
                new decimal Utilization1 { get; set; }
                new decimal Availability1 { get; set; }
                new string UserId { get; set; }
                new string LastName { get; set; }
                new string FirstName { get; set; }
                new string Title { get; set; }
                new decimal Utilization2 { get; set; }
                new decimal Availability2 { get; set; }
                new decimal Utilization3 { get; set; }
                new decimal Availability3 { get; set; }
                new decimal Utilization4 { get; set; }
                new decimal Availability4 { get; set; }
                new decimal Utilization5 { get; set; }
                new decimal Availability5 { get; set; }
                new string Department { get; set; }
                new string Region { get; set; }
                new string Country { get; set; }
                new int PeriodHours { get; set; }
            }
            #pragma warning restore 109
    
            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal class PropertySetProperties
            {
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry
                    RecID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry(
                        "RecID",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._RecID_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._RecID_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._RecID_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._RecID_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._RecID_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._RecID_OnValueChanged);
                private static void _RecID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._RecID, sf);
                }
                private static bool _RecID_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.RecID_IsReadOnly(ref result);
                    return result;
                }
                private static void _RecID_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.RecID_Validate(r);
                }
                private static int _RecID_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.RecID;
                }
                private static void _RecID_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.RecID = v;
                }
                private static void _RecID_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.RecID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry
                    EmployeeID = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry(
                        "EmployeeID",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._EmployeeID_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._EmployeeID_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._EmployeeID_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._EmployeeID_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._EmployeeID_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._EmployeeID_OnValueChanged);
                private static void _EmployeeID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._EmployeeID, sf);
                }
                private static bool _EmployeeID_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.EmployeeID_IsReadOnly(ref result);
                    return result;
                }
                private static void _EmployeeID_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.EmployeeID_Validate(r);
                }
                private static int _EmployeeID_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.EmployeeID;
                }
                private static void _EmployeeID_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.EmployeeID = v;
                }
                private static void _EmployeeID_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.EmployeeID_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry
                    TimePeriod = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry(
                        "TimePeriod",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._TimePeriod_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._TimePeriod_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._TimePeriod_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._TimePeriod_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._TimePeriod_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._TimePeriod_OnValueChanged);
                private static void _TimePeriod_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._TimePeriod, sf);
                }
                private static bool _TimePeriod_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.TimePeriod_IsReadOnly(ref result);
                    return result;
                }
                private static void _TimePeriod_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.TimePeriod_Validate(r);
                }
                private static int _TimePeriod_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.TimePeriod;
                }
                private static void _TimePeriod_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.TimePeriod = v;
                }
                private static void _TimePeriod_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.TimePeriod_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::System.DateTime>.Entry
                    PeriodEnd = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::System.DateTime>.Entry(
                        "PeriodEnd",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodEnd_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodEnd_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodEnd_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodEnd_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodEnd_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodEnd_OnValueChanged);
                private static void _PeriodEnd_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::System.DateTime>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._PeriodEnd, sf);
                }
                private static bool _PeriodEnd_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.PeriodEnd_IsReadOnly(ref result);
                    return result;
                }
                private static void _PeriodEnd_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PeriodEnd_Validate(r);
                }
                private static global::System.DateTime _PeriodEnd_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.PeriodEnd;
                }
                private static void _PeriodEnd_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, global::System.DateTime v)
                {
                    d.ImplementationEntity.PeriodEnd = global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.ClearDateTimeKind(v);
                }
                private static void _PeriodEnd_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.PeriodEnd_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry
                    WeekDays = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry(
                        "WeekDays",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WeekDays_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WeekDays_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WeekDays_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WeekDays_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WeekDays_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WeekDays_OnValueChanged);
                private static void _WeekDays_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._WeekDays, sf);
                }
                private static bool _WeekDays_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.WeekDays_IsReadOnly(ref result);
                    return result;
                }
                private static void _WeekDays_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.WeekDays_Validate(r);
                }
                private static int _WeekDays_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.WeekDays;
                }
                private static void _WeekDays_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.WeekDays = v;
                }
                private static void _WeekDays_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.WeekDays_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry
                    WorkHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry(
                        "WorkHours",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WorkHours_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WorkHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WorkHours_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WorkHours_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WorkHours_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._WorkHours_OnValueChanged);
                private static void _WorkHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._WorkHours, sf);
                }
                private static bool _WorkHours_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.WorkHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _WorkHours_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.WorkHours_Validate(r);
                }
                private static int _WorkHours_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.WorkHours;
                }
                private static void _WorkHours_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.WorkHours = v;
                }
                private static void _WorkHours_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.WorkHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry
                    HolidayHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry(
                        "HolidayHours",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._HolidayHours_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._HolidayHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._HolidayHours_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._HolidayHours_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._HolidayHours_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._HolidayHours_OnValueChanged);
                private static void _HolidayHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._HolidayHours, sf);
                }
                private static bool _HolidayHours_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.HolidayHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _HolidayHours_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.HolidayHours_Validate(r);
                }
                private static int _HolidayHours_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.HolidayHours;
                }
                private static void _HolidayHours_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.HolidayHours = v;
                }
                private static void _HolidayHours_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.HolidayHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    ChargeableHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "ChargeableHours",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ChargeableHours_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ChargeableHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ChargeableHours_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ChargeableHours_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ChargeableHours_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ChargeableHours_OnValueChanged);
                private static void _ChargeableHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._ChargeableHours, sf);
                }
                private static bool _ChargeableHours_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.ChargeableHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _ChargeableHours_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ChargeableHours_Validate(r);
                }
                private static decimal _ChargeableHours_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.ChargeableHours;
                }
                private static void _ChargeableHours_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.ChargeableHours = v;
                }
                private static void _ChargeableHours_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.ChargeableHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    NonChargeableHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "NonChargeableHours",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._NonChargeableHours_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._NonChargeableHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._NonChargeableHours_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._NonChargeableHours_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._NonChargeableHours_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._NonChargeableHours_OnValueChanged);
                private static void _NonChargeableHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._NonChargeableHours, sf);
                }
                private static bool _NonChargeableHours_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.NonChargeableHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _NonChargeableHours_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.NonChargeableHours_Validate(r);
                }
                private static decimal _NonChargeableHours_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.NonChargeableHours;
                }
                private static void _NonChargeableHours_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.NonChargeableHours = v;
                }
                private static void _NonChargeableHours_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.NonChargeableHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    ExceptionHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "ExceptionHours",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ExceptionHours_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ExceptionHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ExceptionHours_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ExceptionHours_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ExceptionHours_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._ExceptionHours_OnValueChanged);
                private static void _ExceptionHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._ExceptionHours, sf);
                }
                private static bool _ExceptionHours_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.ExceptionHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _ExceptionHours_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.ExceptionHours_Validate(r);
                }
                private static decimal _ExceptionHours_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.ExceptionHours;
                }
                private static void _ExceptionHours_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.ExceptionHours = v;
                }
                private static void _ExceptionHours_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.ExceptionHours_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Utilization = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Utilization",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization_OnValueChanged);
                private static void _Utilization_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Utilization, sf);
                }
                private static bool _Utilization_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Utilization_IsReadOnly(ref result);
                    return result;
                }
                private static void _Utilization_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Utilization_Validate(r);
                }
                private static decimal _Utilization_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Utilization;
                }
                private static void _Utilization_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Utilization = v;
                }
                private static void _Utilization_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Utilization_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Availability = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Availability",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability_OnValueChanged);
                private static void _Availability_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Availability, sf);
                }
                private static bool _Availability_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Availability_IsReadOnly(ref result);
                    return result;
                }
                private static void _Availability_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Availability_Validate(r);
                }
                private static decimal _Availability_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Availability;
                }
                private static void _Availability_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Availability = v;
                }
                private static void _Availability_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Availability_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Utilization1 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Utilization1",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization1_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization1_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization1_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization1_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization1_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization1_OnValueChanged);
                private static void _Utilization1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Utilization1, sf);
                }
                private static bool _Utilization1_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Utilization1_IsReadOnly(ref result);
                    return result;
                }
                private static void _Utilization1_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Utilization1_Validate(r);
                }
                private static decimal _Utilization1_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Utilization1;
                }
                private static void _Utilization1_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Utilization1 = v;
                }
                private static void _Utilization1_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Utilization1_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Availability1 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Availability1",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability1_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability1_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability1_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability1_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability1_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability1_OnValueChanged);
                private static void _Availability1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Availability1, sf);
                }
                private static bool _Availability1_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Availability1_IsReadOnly(ref result);
                    return result;
                }
                private static void _Availability1_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Availability1_Validate(r);
                }
                private static decimal _Availability1_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Availability1;
                }
                private static void _Availability1_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Availability1 = v;
                }
                private static void _Availability1_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Availability1_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry
                    UserId = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry(
                        "UserId",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._UserId_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._UserId_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._UserId_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._UserId_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._UserId_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._UserId_OnValueChanged);
                private static void _UserId_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._UserId, sf);
                }
                private static bool _UserId_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.UserId_IsReadOnly(ref result);
                    return result;
                }
                private static void _UserId_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.UserId_Validate(r);
                }
                private static string _UserId_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.UserId;
                }
                private static void _UserId_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.UserId = v;
                }
                private static void _UserId_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.UserId_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry
                    LastName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry(
                        "LastName",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._LastName_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._LastName_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._LastName_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._LastName_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._LastName_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._LastName_OnValueChanged);
                private static void _LastName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._LastName, sf);
                }
                private static bool _LastName_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.LastName_IsReadOnly(ref result);
                    return result;
                }
                private static void _LastName_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.LastName_Validate(r);
                }
                private static string _LastName_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.LastName;
                }
                private static void _LastName_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.LastName = v;
                }
                private static void _LastName_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.LastName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry
                    FirstName = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry(
                        "FirstName",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._FirstName_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._FirstName_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._FirstName_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._FirstName_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._FirstName_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._FirstName_OnValueChanged);
                private static void _FirstName_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._FirstName, sf);
                }
                private static bool _FirstName_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.FirstName_IsReadOnly(ref result);
                    return result;
                }
                private static void _FirstName_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.FirstName_Validate(r);
                }
                private static string _FirstName_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.FirstName;
                }
                private static void _FirstName_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.FirstName = v;
                }
                private static void _FirstName_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.FirstName_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry
                    Title = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry(
                        "Title",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Title_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Title_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Title_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Title_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Title_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Title_OnValueChanged);
                private static void _Title_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Title, sf);
                }
                private static bool _Title_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Title_IsReadOnly(ref result);
                    return result;
                }
                private static void _Title_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Title_Validate(r);
                }
                private static string _Title_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Title;
                }
                private static void _Title_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Title = v;
                }
                private static void _Title_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Title_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Utilization2 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Utilization2",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization2_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization2_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization2_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization2_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization2_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization2_OnValueChanged);
                private static void _Utilization2_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Utilization2, sf);
                }
                private static bool _Utilization2_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Utilization2_IsReadOnly(ref result);
                    return result;
                }
                private static void _Utilization2_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Utilization2_Validate(r);
                }
                private static decimal _Utilization2_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Utilization2;
                }
                private static void _Utilization2_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Utilization2 = v;
                }
                private static void _Utilization2_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Utilization2_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Availability2 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Availability2",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability2_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability2_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability2_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability2_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability2_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability2_OnValueChanged);
                private static void _Availability2_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Availability2, sf);
                }
                private static bool _Availability2_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Availability2_IsReadOnly(ref result);
                    return result;
                }
                private static void _Availability2_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Availability2_Validate(r);
                }
                private static decimal _Availability2_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Availability2;
                }
                private static void _Availability2_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Availability2 = v;
                }
                private static void _Availability2_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Availability2_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Utilization3 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Utilization3",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization3_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization3_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization3_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization3_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization3_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization3_OnValueChanged);
                private static void _Utilization3_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Utilization3, sf);
                }
                private static bool _Utilization3_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Utilization3_IsReadOnly(ref result);
                    return result;
                }
                private static void _Utilization3_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Utilization3_Validate(r);
                }
                private static decimal _Utilization3_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Utilization3;
                }
                private static void _Utilization3_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Utilization3 = v;
                }
                private static void _Utilization3_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Utilization3_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Availability3 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Availability3",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability3_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability3_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability3_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability3_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability3_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability3_OnValueChanged);
                private static void _Availability3_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Availability3, sf);
                }
                private static bool _Availability3_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Availability3_IsReadOnly(ref result);
                    return result;
                }
                private static void _Availability3_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Availability3_Validate(r);
                }
                private static decimal _Availability3_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Availability3;
                }
                private static void _Availability3_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Availability3 = v;
                }
                private static void _Availability3_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Availability3_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Utilization4 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Utilization4",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization4_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization4_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization4_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization4_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization4_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization4_OnValueChanged);
                private static void _Utilization4_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Utilization4, sf);
                }
                private static bool _Utilization4_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Utilization4_IsReadOnly(ref result);
                    return result;
                }
                private static void _Utilization4_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Utilization4_Validate(r);
                }
                private static decimal _Utilization4_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Utilization4;
                }
                private static void _Utilization4_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Utilization4 = v;
                }
                private static void _Utilization4_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Utilization4_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Availability4 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Availability4",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability4_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability4_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability4_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability4_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability4_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability4_OnValueChanged);
                private static void _Availability4_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Availability4, sf);
                }
                private static bool _Availability4_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Availability4_IsReadOnly(ref result);
                    return result;
                }
                private static void _Availability4_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Availability4_Validate(r);
                }
                private static decimal _Availability4_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Availability4;
                }
                private static void _Availability4_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Availability4 = v;
                }
                private static void _Availability4_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Availability4_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Utilization5 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Utilization5",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization5_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization5_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization5_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization5_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization5_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Utilization5_OnValueChanged);
                private static void _Utilization5_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Utilization5, sf);
                }
                private static bool _Utilization5_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Utilization5_IsReadOnly(ref result);
                    return result;
                }
                private static void _Utilization5_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Utilization5_Validate(r);
                }
                private static decimal _Utilization5_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Utilization5;
                }
                private static void _Utilization5_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Utilization5 = v;
                }
                private static void _Utilization5_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Utilization5_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry
                    Availability5 = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Entry(
                        "Availability5",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability5_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability5_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability5_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability5_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability5_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Availability5_OnValueChanged);
                private static void _Availability5_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Availability5, sf);
                }
                private static bool _Availability5_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Availability5_IsReadOnly(ref result);
                    return result;
                }
                private static void _Availability5_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Availability5_Validate(r);
                }
                private static decimal _Availability5_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Availability5;
                }
                private static void _Availability5_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, decimal v)
                {
                    d.ImplementationEntity.Availability5 = v;
                }
                private static void _Availability5_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Availability5_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry
                    Department = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry(
                        "Department",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Department_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Department_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Department_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Department_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Department_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Department_OnValueChanged);
                private static void _Department_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Department, sf);
                }
                private static bool _Department_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Department_IsReadOnly(ref result);
                    return result;
                }
                private static void _Department_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Department_Validate(r);
                }
                private static string _Department_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Department;
                }
                private static void _Department_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Department = v;
                }
                private static void _Department_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Department_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry
                    Region = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry(
                        "Region",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Region_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Region_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Region_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Region_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Region_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Region_OnValueChanged);
                private static void _Region_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Region, sf);
                }
                private static bool _Region_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Region_IsReadOnly(ref result);
                    return result;
                }
                private static void _Region_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Region_Validate(r);
                }
                private static string _Region_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Region;
                }
                private static void _Region_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Region = v;
                }
                private static void _Region_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Region_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry
                    Country = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Entry(
                        "Country",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Country_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Country_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Country_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Country_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Country_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._Country_OnValueChanged);
                private static void _Country_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._Country, sf);
                }
                private static bool _Country_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.Country_IsReadOnly(ref result);
                    return result;
                }
                private static void _Country_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.Country_Validate(r);
                }
                private static string _Country_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.Country;
                }
                private static void _Country_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, string v)
                {
                    d.ImplementationEntity.Country = v;
                }
                private static void _Country_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.Country_Changed();
                }
    
                [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
                public static readonly global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry
                    PeriodHours = new global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Entry(
                        "PeriodHours",
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodHours_Stub,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodHours_ComputeIsReadOnly,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodHours_Validate,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodHours_GetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodHours_SetImplementationValue,
                        global::LightSwitchApplication.MultiPeriodForecast.DetailsClass.PropertySetProperties._PeriodHours_OnValueChanged);
                private static void _PeriodHours_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data> c, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, object sf)
                {
                    c(d, ref d._PeriodHours, sf);
                }
                private static bool _PeriodHours_ComputeIsReadOnly(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    bool result = false;
                    e.PeriodHours_IsReadOnly(ref result);
                    return result;
                }
                private static void _PeriodHours_Validate(global::LightSwitchApplication.MultiPeriodForecast e, global::Microsoft.LightSwitch.EntityValidationResultsBuilder r)
                {
                    e.PeriodHours_Validate(r);
                }
                private static int _PeriodHours_GetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d)
                {
                    return d.ImplementationEntity.PeriodHours;
                }
                private static void _PeriodHours_SetImplementationValue(global::LightSwitchApplication.MultiPeriodForecast.DetailsClass d, int v)
                {
                    d.ImplementationEntity.PeriodHours = v;
                }
                private static void _PeriodHours_OnValueChanged(global::LightSwitchApplication.MultiPeriodForecast e)
                {
                    e.PeriodHours_Changed();
                }
    
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data _RecID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data _EmployeeID;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data _TimePeriod;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, global::System.DateTime>.Data _PeriodEnd;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data _WeekDays;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data _WorkHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data _HolidayHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _ChargeableHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _NonChargeableHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _ExceptionHours;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Utilization;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Availability;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Utilization1;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Availability1;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data _UserId;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data _LastName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data _FirstName;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data _Title;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Utilization2;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Availability2;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Utilization3;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Availability3;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Utilization4;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Availability4;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Utilization5;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, decimal>.Data _Availability5;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data _Department;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data _Region;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, string>.Data _Country;
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.EntityStorageProperty<global::LightSwitchApplication.MultiPeriodForecast, global::LightSwitchApplication.MultiPeriodForecast.DetailsClass, int>.Data _PeriodHours;
            
        }
    
        #endregion
    }
    
    #endregion
}
