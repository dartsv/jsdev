//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::ApplicationData.Implementation.ApplicationDataObjectContext>
    {
    
        public ApplicationDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Project
    
        public void InsertProject(global::ApplicationData.Implementation.Project entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Projects.AddObject(entity);
            }
        }
    
        public void UpdateProject(global::ApplicationData.Implementation.Project currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Projects, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteProject(global::ApplicationData.Implementation.Project entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Projects.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region StaffingRequirement
    
        public void InsertStaffingRequirement(global::ApplicationData.Implementation.StaffingRequirement entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.StaffingRequirements.AddObject(entity);
            }
        }
    
        public void UpdateStaffingRequirement(global::ApplicationData.Implementation.StaffingRequirement currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.StaffingRequirements, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteStaffingRequirement(global::ApplicationData.Implementation.StaffingRequirement entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.StaffingRequirements.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Employee
    
        public void InsertEmployee(global::ApplicationData.Implementation.Employee entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Employees.AddObject(entity);
            }
        }
    
        public void UpdateEmployee(global::ApplicationData.Implementation.Employee currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Employees, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteEmployee(global::ApplicationData.Implementation.Employee entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Employees.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region EmployeeAssignment
    
        public void InsertEmployeeAssignment(global::ApplicationData.Implementation.EmployeeAssignment entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.EmployeeAssignments.AddObject(entity);
            }
        }
    
        public void UpdateEmployeeAssignment(global::ApplicationData.Implementation.EmployeeAssignment currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.EmployeeAssignments, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteEmployeeAssignment(global::ApplicationData.Implementation.EmployeeAssignment entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.EmployeeAssignments.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region TimeForecast
    
        public void InsertTimeForecast(global::ApplicationData.Implementation.TimeForecast entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.TimeForecasts.AddObject(entity);
            }
        }
    
        public void UpdateTimeForecast(global::ApplicationData.Implementation.TimeForecast currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.TimeForecasts, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteTimeForecast(global::ApplicationData.Implementation.TimeForecast entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.TimeForecasts.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ForecastException
    
        public void InsertForecastException(global::ApplicationData.Implementation.ForecastException entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ForecastExceptions.AddObject(entity);
            }
        }
    
        public void UpdateForecastException(global::ApplicationData.Implementation.ForecastException currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ForecastExceptions, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteForecastException(global::ApplicationData.Implementation.ForecastException entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ForecastExceptions.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> Projects_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Project>("Projects_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> Projects_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Project>("Projects_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> Projects_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Project>("Projects_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> StaffingRequirements_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.StaffingRequirement>("StaffingRequirements_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> StaffingRequirements_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.StaffingRequirement>("StaffingRequirements_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> StaffingRequirements_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.StaffingRequirement>("StaffingRequirements_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> Employees_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Employee>("Employees_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> Employees_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Employee>("Employees_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> Employees_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Employee>("Employees_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> EmployeeAssignments_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.EmployeeAssignment>("EmployeeAssignments_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> EmployeeAssignments_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.EmployeeAssignment>("EmployeeAssignments_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> EmployeeAssignments_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.EmployeeAssignment>("EmployeeAssignments_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> ActiveProjects(string frameworkOperators, global::System.Nullable<bool> ShowClosed)
        {
            return this.GetQuery<global::ApplicationData.Implementation.Project>("ActiveProjects", frameworkOperators, ShowClosed);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> TimeForecasts_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.TimeForecast>("TimeForecasts_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> TimeForecasts_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.TimeForecast>("TimeForecasts_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> TimeForecasts_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.TimeForecast>("TimeForecasts_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> ForecastExceptions_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.ForecastException>("ForecastExceptions_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> ForecastExceptions_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::ApplicationData.Implementation.ForecastException>("ForecastExceptions_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> ForecastExceptions_All(string frameworkOperators)
        {
            return this.GetQuery<global::ApplicationData.Implementation.ForecastException>("ForecastExceptions_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().ApplicationData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class ApplicationDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::ApplicationData.Implementation.ApplicationDataObjectContext>
    {
        public ApplicationDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> Projects_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Project>("Projects_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> Projects_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Project>("Projects_All"),
                (p) => (Id.HasValue && (p.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> Projects_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.Project>("[Projects]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> StaffingRequirements_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.StaffingRequirement>("StaffingRequirements_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> StaffingRequirements_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.StaffingRequirement>("StaffingRequirements_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> StaffingRequirements_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.StaffingRequirement> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.StaffingRequirement>("[StaffingRequirements]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> Employees_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Employee>("Employees_All"),
                (e) => (Id.HasValue && (e.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> Employees_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.Employee>("Employees_All"),
                (e) => (Id.HasValue && (e.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> Employees_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Employee> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.Employee>("[Employees]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> EmployeeAssignments_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.EmployeeAssignment>("EmployeeAssignments_All"),
                (e) => (Id.HasValue && (e.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> EmployeeAssignments_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.EmployeeAssignment>("EmployeeAssignments_All"),
                (e) => (Id.HasValue && (e.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> EmployeeAssignments_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.EmployeeAssignment> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.EmployeeAssignment>("[EmployeeAssignments]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> ActiveProjects(global::System.Nullable<bool> ShowClosed)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.Project> query;
            query = global::System.Linq.Queryable.ThenBy(
                global::System.Linq.Queryable.OrderBy(
                    global::System.Linq.Queryable.Where(
                        this.GetQuery<global::ApplicationData.Implementation.Project>("Projects_All"),
                        (p) => (((ShowClosed.HasValue == false) || (ShowClosed.HasValue && (p.Closed == ShowClosed))) || (p.Closed == false))),
                    (p) => p.Client),
                (p) => p.ProjectName);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> TimeForecasts_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.TimeForecast>("TimeForecasts_All"),
                (t) => (Id.HasValue && (t.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> TimeForecasts_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.TimeForecast>("TimeForecasts_All"),
                (t) => (Id.HasValue && (t.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> TimeForecasts_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.TimeForecast> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.TimeForecast>("[TimeForecasts]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> ForecastExceptions_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.ForecastException>("ForecastExceptions_All"),
                (f) => (Id.HasValue && (f.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> ForecastExceptions_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::ApplicationData.Implementation.ForecastException>("ForecastExceptions_All"),
                (f) => (Id.HasValue && (f.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> ForecastExceptions_All()
        {
            global::System.Linq.IQueryable<global::ApplicationData.Implementation.ForecastException> query;
            query = base.CreateQuery<global::ApplicationData.Implementation.ForecastException>("[ForecastExceptions]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::ApplicationData.Implementation.Project))
            {
                return new global::ApplicationData.Implementation.Project();
            }
            if (type == typeof(global::ApplicationData.Implementation.StaffingRequirement))
            {
                return new global::ApplicationData.Implementation.StaffingRequirement();
            }
            if (type == typeof(global::ApplicationData.Implementation.Employee))
            {
                return new global::ApplicationData.Implementation.Employee();
            }
            if (type == typeof(global::ApplicationData.Implementation.EmployeeAssignment))
            {
                return new global::ApplicationData.Implementation.EmployeeAssignment();
            }
            if (type == typeof(global::ApplicationData.Implementation.TimeForecast))
            {
                return new global::ApplicationData.Implementation.TimeForecast();
            }
            if (type == typeof(global::ApplicationData.Implementation.ForecastException))
            {
                return new global::ApplicationData.Implementation.ForecastException();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::ApplicationData.Implementation.ApplicationDataObjectContext CreateObjectContext()
        {
            return new global::ApplicationData.Implementation.ApplicationDataObjectContext(base.GetEntityConnectionString(
                "_IntrinsicData", 
                "res://*/ApplicationData.csdl|res://*/ApplicationData.ssdl|res://*/ApplicationData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Project))
            {
                return new global::ApplicationData.Implementation.Project();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.StaffingRequirement))
            {
                return new global::ApplicationData.Implementation.StaffingRequirement();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Employee))
            {
                return new global::ApplicationData.Implementation.Employee();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.EmployeeAssignment))
            {
                return new global::ApplicationData.Implementation.EmployeeAssignment();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.TimeForecast))
            {
                return new global::ApplicationData.Implementation.TimeForecast();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ForecastException))
            {
                return new global::ApplicationData.Implementation.ForecastException();
            }
            return null;
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.ApplicationDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.ApplicationData))
            {
                return new global::LightSwitchApplication.Implementation.ApplicationDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Project) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.Project);
            }
            if (typeof(global::LightSwitchApplication.StaffingRequirement) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.StaffingRequirement);
            }
            if (typeof(global::LightSwitchApplication.Employee) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.Employee);
            }
            if (typeof(global::LightSwitchApplication.EmployeeAssignment) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.EmployeeAssignment);
            }
            if (typeof(global::LightSwitchApplication.TimeForecast) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.TimeForecast);
            }
            if (typeof(global::LightSwitchApplication.ForecastException) == definitionType)
            {
                return typeof(global::ApplicationData.Implementation.ForecastException);
            }
            return null;
        }
    }
}

namespace ApplicationData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.Project.Metadata))]
    public partial class Project :
        global::LightSwitchApplication.Project.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Project.DetailsClass.IImplementation.StaffingRequirements
        {
            get
            {
                return this.StaffingRequirements;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Project.DetailsClass.IImplementation.EmployeeAssignment
        {
            get
            {
                return this.EmployeeAssignment;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Project.DetailsClass.IImplementation.Director
        {
            get
            {
                return this.Director;
            }
            set
            {
                this.Director = (global::ApplicationData.Implementation.Employee)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Director");
                }
            }
        }
        
        partial void OnProject_EmployeeChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Director");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Project.DetailsClass.IImplementation.Manager
        {
            get
            {
                return this.Manager;
            }
            set
            {
                this.Manager = (global::ApplicationData.Implementation.Employee)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Manager");
                }
            }
        }
        
        partial void OnProject_Employee1Changed()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Manager");
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Project.DetailsClass.IImplementation.TimeForecasts
        {
            get
            {
                return this.TimeForecasts;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Employee Director { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Employee Manager { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.StaffingRequirement.Metadata))]
    public partial class StaffingRequirement :
        global::LightSwitchApplication.StaffingRequirement.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.StaffingRequirement.DetailsClass.IImplementation.Project
        {
            get
            {
                return this.Project;
            }
            set
            {
                this.Project = (global::ApplicationData.Implementation.Project)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Project");
                }
            }
        }
        
        partial void OnStaffingRequirement_ProjectChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Project");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Project Project { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Employee :
        global::LightSwitchApplication.Employee.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.Employee.DetailsClass.IImplementation.EmployeeAssignments
        {
            get
            {
                return this.EmployeeAssignments;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Employee.DetailsClass.IImplementation.Projects
        {
            get
            {
                return this.Projects;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Employee.DetailsClass.IImplementation.Project
        {
            get
            {
                return this.Project;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Employee.DetailsClass.IImplementation.TimeForecasts
        {
            get
            {
                return this.TimeForecasts;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.EmployeeAssignment.Metadata))]
    public partial class EmployeeAssignment :
        global::LightSwitchApplication.EmployeeAssignment.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.EmployeeAssignment.DetailsClass.IImplementation.Projects
        {
            get
            {
                return this.Projects;
            }
            set
            {
                this.Projects = (global::ApplicationData.Implementation.Project)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Projects");
                }
            }
        }
        
        partial void OnEmployeeAssignment_ProjectChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Projects");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.EmployeeAssignment.DetailsClass.IImplementation.Employee
        {
            get
            {
                return this.Employee;
            }
            set
            {
                this.Employee = (global::ApplicationData.Implementation.Employee)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Employee");
                }
            }
        }
        
        partial void OnEmployeeAssignment_EmployeeChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Employee");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Project Projects { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Employee Employee { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::ApplicationData.Implementation.TimeForecast.Metadata))]
    public partial class TimeForecast :
        global::LightSwitchApplication.TimeForecast.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.TimeForecast.DetailsClass.IImplementation.Project1
        {
            get
            {
                return this.Project1;
            }
            set
            {
                this.Project1 = (global::ApplicationData.Implementation.Project)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Project1");
                }
            }
        }
        
        partial void OnTimeForecast_ProjectChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Project1");
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.TimeForecast.DetailsClass.IImplementation.Employee
        {
            get
            {
                return this.Employee;
            }
            set
            {
                this.Employee = (global::ApplicationData.Implementation.Employee)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Employee");
                }
            }
        }
        
        partial void OnTimeForecast_EmployeeChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("Employee");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Project Project1 { get; set; }
        
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::ApplicationData.Implementation.Employee Employee { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ForecastException :
        global::LightSwitchApplication.ForecastException.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

